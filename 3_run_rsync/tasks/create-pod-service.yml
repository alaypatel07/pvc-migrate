# vars this task expects
#        pvc_namespace: "{{ item.pvc_namespace }}"
#        pvc_name: "{{ item.pvc_name }}"
#        pod_name: "{{ pvc_name }}-ssh-rync"
#        svc_name: "{{ pvc_namespace }}-ssh"
#        volume_name: "{{ item.volume_name }}"
#        secret_name: "{{ pod_name }}-public-key"
#        bound_pod_uid: "{{ item.bound_pod_uid }}"
#        mig_source_host: "{{ item.node_name }}"



- debug: msg="{{ item }}"

# TODO: inject dynamic public key
# try with poststart hook to get right permissions
#       lifecycle:
#          postStart:
#            exec:
#              command:
#                - /bin/sh
#                - -c
#                - cp /var/my-app-secrets/id_rsa /var/my-app/id_rsa
#- name: create a secret for public key
#  k8s:
#    state: present
#    definition:
#      api_version: v1
#      kind: Secret
#      metadata:
#        name: "{{ secret_name }}"
#        namespace: "{{ pvc_namespace }}"
#      data:
#        authorized_keys: "{{ public_key }}"
#
####
- debug: msg="{{ lookup('template', 'pod.yml.j2') }}"
- name: create a pod for rsync
  k8s:
    state: present
    definition: "{{ lookup('template', 'pod.yml.j2') }}"

- name: create a service for rsync
  k8s:
    state: present
    definition: "{{ lookup('template', 'svc.yml.j2') }}"

- name: wait for pod to be running
  k8s_info:
    api_version: v1
    kind: pod
    name: "{{ pod_name }}"
    namespace: "{{ pvc_namespace }}"
  register: pod
  until: "true in (pod | json_query('resources[].status.containerStatuses[].ready'))"
  retries: 100
  delay: 3

- name: wait for svc to get a load balancer IP
  k8s_facts:
    api_version: v1
    kind: service
    name: "{{ svc_name }}"
    namespace: "{{ pvc_namespace }}"
  register: svc
  until: " svc.resources is defined
            and svc.resources[0].status is defined
            and svc.resources[0].status.loadBalancer is defined
            and svc.resources[0].status.loadBalancer.ingress is defined"
  retries: 100
  delay: 3

- set_fact:
    failed_pvcs: []
    successful_pvcs: []

- name: run rsync for pvc synchronously
  vars:
    pvc_ns: "{{ item.pvc_namespace }}"
    pvc_name: "{{ item.pvc_name }}"
    volume_name: "{{ item.pvc_name }}"
    bound_pod_uid: "{{ item.bound_pod_uid }}"
    node_name: "{{ item.node_name }}"
  include_tasks: "tasks/rsync.yml"
  with_items: "{{ pvcs }}"

#  - when: sync_output.rc != 0
#    fail:
#      msg: "There was an error syncing data across clusters. Please re-run the task with --tags final_phase or --tags sync_phase. The data transfer will begin at the point it previously failed."


- name: cleanup the transfer pod for rsync
  k8s:
    state: absent
    definition: "{{ lookup('template', 'pod.yml.j2') }}"

- name: wait for pod to be deleted
  k8s_info:
    api_version: v1
    kind: pod
    name: "{{ pod_name }}"
    namespace: "{{ pvc_namespace }}"
  register: p
  until: "{{ p.resources | length == 0 }}"
  retries: 100
  delay: 3

- name: cleanup the service for rsync
  k8s:
    state: absent
    definition: "{{ lookup('template', 'svc.yml.j2') }}"

- name: wait for service to be deleted
  k8s_info:
    api_version: v1
    kind: service
    name: "{{ svc_name }}"
    namespace: "{{ pvc_namespace }}"
  register: s
  until: "{{ s.resources | length == 0 }}"
  retries: 100
  delay: 3

- debug: msg="{{ failed_pvcs }} {{ successful_pvcs }}"

- copy:
    content: "{{ failed_pvcs | to_json }}"
    dest: "{{ failed_pvcs_dir }}/{{ pvc_namespace }}-failed.json"

- copy:
    content: "{{ successful_pvcs | to_json }}"
    dest: "{{ successful_pvcs_dir }}/{{ pvc_namespace }}-successful.json"