- debug: msg="{{ item }}"

# TODO: inject dynamic public key
# try with poststart hook to get right permissions
#       lifecycle:
#          postStart:
#            exec:
#              command:
#                - /bin/sh
#                - -c
#                - cp /var/my-app-secrets/id_rsa /var/my-app/id_rsa
#- name: create a secret for public key
#  k8s:
#    state: present
#    definition:
#      api_version: v1
#      kind: Secret
#      metadata:
#        name: "{{ secret_name }}"
#        namespace: "{{ pvc_namespace }}"
#      data:
#        authorized_keys: "{{ public_key }}"

- name: create a pod for rsync
  k8s:
    state: present
    definition: "{{ lookup('template', 'pod.yml.j2') }}"

- name: create a service for rsync
  k8s:
    state: present
    definition: "{{ lookup('template', 'svc.yml.j2') }}"

- name: wait for pod to be running
  k8s_info:
    api_version: v1
    kind: pod
    name: "{{ pod_name }}"
    namespace: "{{ pvc_namespace }}"
  register: pod
  until: "true in (pod | json_query('resources[].status.containerStatuses[].ready'))"
  retries: 100
  delay: 3

- name: wait for svc to get a load balancer IP
  k8s_facts:
    api_version: v1
    kind: service
    name: "{{ svc_name }}"
    namespace: "{{ pvc_namespace }}"
  register: svc
  until: " svc.resources is defined
            and svc.resources[0].status is defined
            and svc.resources[0].status.loadBalancer is defined
            and svc.resources[0].status.loadBalancer.ingress is defined"
  retries: 100
  delay: 3

- set_fact:
    mig_dest_service_url: "{{ svc.resources[0].status.loadBalancer.ingress[0].hostname }}"
    mig_dest_data_location: "/mnt/{{ pvc_namespace }}/{{ pvc_name }}"
    mig_source_data_location: "/var/lib/origin/openshift.local.volumes/pods/{{ bound_pod_uid }}/volumes/kubernetes.io~glusterfs/{{ pvc_name }}/"
  #    mig_source_host : get from inventory
    mig_dest_ssh_key : "{{ rsync_public_key_filepath }}"

- name: stub for rsync to run
#  TODO: @pranavgaikwad

